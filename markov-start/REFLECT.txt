Name: [Sofia Nieto]
NetID: [sen20]
Hours Spent: [30.1 ]
Consulted With: [Anjali Arora, Leah Schwartz, Katie Connell]
Resources Used: [Stack Exchange, SoloLean, tutorialspoint ]
Impressions: [This was extremely challenging.]
%%%%
PROBLEM 1:
Varying text length, and order using file length 163187 (alice.txt)
order	#chars	source	mean	sigma
1	2000	163187	0.725	0.012
1	4000	163187	1.588	0.080
1	8000	163187	3.247	0.210
1	16000	163187	6.572	1.402
5	2000	163187	0.077	0.002
5	4000	163187	0.138	0.000
5	8000	163187	0.284	0.001
5	16000	163187	0.566	0.001
10	2000	163187	0.073	0.000
10	4000	163187	0.132	0.000
10	8000	163187	0.263	0.000
10	16000	163187	0.534	0.003

Varying text length, and order using file length 507914 (hawthorne.txt)
order	#chars	source	mean	sigma
1	2000	507914	2.601	0.209
1	4000	507914	4.711	0.022
1	8000	507914	10.202	1.422
1	16000	507914	19.322	1.501
5	2000	507914	0.222	0.002
5	4000	507914	0.429	0.001
5	8000	507914	0.850	0.001
5	16000	507914	1.705	0.002
10	2000	507914	0.194	0.000
10	4000	507914	0.403	0.002
10	8000	507914	0.786	0.000
10	16000	507914	1.584	0.002

%%%%
PROBLEM 2:

As the length of the training text increases, the runtime increases.
This is because the program must loop more text. As the order increases,
the run time decreases. This is because it is less likely for a 10-wordgram
to occur than a 1-wordgram. Thus, there are less values for 10-wordgram  and less
possiblities. To generate 16,000 random characters for an order-5 markov model 
with a training text of 5.5 million characters it would take at least 10 times as
long as it took to generate 16,000 random characters for an order-5 markov model with
hawthorne (1.705) because the training text is more that 5 times as long. Additionally,
it would likely take longer than 10 times the hawthorne run time because a long text
means more possible word grams that would have to be generated. 


%%%%
PROBLEM 3:

Varying text length, and order using file length 163187 (alice.txt)

order	#chars	source	mean	sigma
1	2000	163187	0.049	0.004
1	4000	163187	0.022	0.000
1	8000	163187	0.033	0.000
1	16000	163187	0.028	0.000
5	2000	163187	0.044	0.000
5	4000	163187	0.036	0.000
5	8000	163187	0.043	0.000
5	16000	163187	0.042	0.001
10	2000	163187	0.088	0.011
10	4000	163187	0.109	0.007
10	8000	163187	0.103	0.008
10	16000	163187	0.105	0.012

Varying text length, and order using file length 507914 (hawthorne.txt)

order	#chars	source	mean	sigma
1	2000	507914	0.092	0.002
1	4000	507914	0.065	0.000
1	8000	507914	0.057	0.000
1	16000	507914	0.041	0.000
5	2000	507914	0.192	0.013
5	4000	507914	0.163	0.008
5	8000	507914	0.185	0.011
5	16000	507914	0.188	0.009
10	2000	507914	0.409	0.026
10	4000	507914	0.416	0.036
10	8000	507914	0.334	0.025
10	16000	507914	0.341	0.029

As the length of the training text increases, the runtime increases.
This is because the program must loop more text. As, the order increase,
the runtime increases. This is because there are more words to process in 
the key.As max characters generated increases, the runtime decreases.It would 
take longer than ten times as long as hawthorne.txt (because hawthorne is a
 500,000 in length).Additionally,it would likely take longer than 10 times 
 the hawthorne run time because a long text means more possible word grams that 
 would have to be generated. It would still be shorter than markov model because
  it is using maps and hashing more efficiently instead of running through all the data. 

%%%%
PROBLEM 4:
200 + 196 +189 + 106 +200 + 200 +200 + 114 + 200 + 149/10 = 175.4 characters

175.4 characters will be generated on average for an order-5 Markov process. 
%%%%
PROBLEM 5:

The run times as the length of the training text and thus the number of keys 
increases for TreeMaps are significantly longer than those for Hashmaps. This
is because TreeMaps order their keys in the natural order. Thus, every time
a new key the computer must do more work and reorder the keys. This causes the 
run time for TreeMaps to increase and be much longer than those for Hashmaps
especially as the text length gets longer because more reordering must occur
to get TreeMaps into their natural order because more keys are being added. 

%%%%
